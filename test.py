import streamlit as st
from streamlit_option_menu import option_menu
from PIL import Image
import chardet
import plotly.express as px
from ultralytics import YOLO
import pandas as pd
import easyocr
from vietocr.tool.predictor import Predictor
from vietocr.tool.config import Cfg

config = Cfg.load_config_from_name('vgg_transformer')
config['cnn']['pretrained']=False
config['device'] = 'cpu'

detector = Predictor(config)

def tensor_to_numpy(tensor):
    return tensor.cpu().detach().numpy()

reader = easyocr.Reader(['vi'])

# Model path
model_path = 'Weight/best1.pt'

# Initialize session state
if 'logged_in' not in st.session_state:
    st.session_state.logged_in = False

# Function for login
def login():
    st.title("OCR Invoice Detection - ƒêƒÉng nh·∫≠p")
    username = st.text_input("Username")
    password = st.text_input("Password", type="password")
    login_button = st.button("Login")

    if login_button:
        # Validate login (add your own logic)
        if username == "im" and password == "123":
            st.success("Login successful!")
            # Set the session state to indicate that the user is logged in
            st.session_state.logged_in = True
            main()
        else:
            st.error("Invalid username or password")

# Function for loading the YOLO model
def load_yolo_model():
    try:
        model = YOLO(model_path)
        return model
    except Exception as ex:
        st.error(f"Unable to load model. Check the specified path: {model_path}")
        st.error(ex)
        return None
    
def extract_info_based_on_class(names, ocr_results):
    supplier_info = {"T√™n nh√† cung c·∫•p": [], "ƒê·ªãa ch·ªâ nh√† cung c·∫•p": []}
    customer_info = {"Ng∆∞·ªùi giao": [], "ƒê·ªãa ch·ªâ kho": [], "Kho": []}
    invoice_info = {"S·ªë h√≥a ƒë∆°n": [], "Ng√†y nh·∫≠p kho": []}
    product_info = {"S·∫£n ph·∫©m": [], "Th·ª±c nh·∫≠p": [], "ƒê∆°n gi√°": [], "Th√†nh ti·ªÅn": []}

    for result in ocr_results:
        for name, text in result.items():
            if name == "nhacungcap":
                supplier_info["T√™n nh√† cung c·∫•p"].append(text)
            elif name == "diachicungcap":
                supplier_info["ƒê·ªãa ch·ªâ nh√† cung c·∫•p"].append(text)
            elif name == "nguoigiao":
                customer_info["Ng∆∞·ªùi giao"].append(text)
            elif name == "diachikho":
                customer_info["ƒê·ªãa ch·ªâ kho"].append(text)
            elif name == "kho":
                customer_info["Kho"].append(text)
            elif name == "sohoadon":
                invoice_info["S·ªë h√≥a ƒë∆°n"].append(text)
            elif name == "ngaynhapkho":
                invoice_info["Ng√†y nh·∫≠p kho"].append(text)
            elif name == "sanpham":
                product_info["S·∫£n ph·∫©m"].append(text)
            elif name == "thucnhap":
                product_info["Th·ª±c nh·∫≠p"].append(text)
            elif name == "dongia":
                product_info["ƒê∆°n gi√°"].append(text)
            elif name == "thanhtien":
                product_info["Th√†nh ti·ªÅn"].append(text)
    supplier_info["T√™n nh√† cung c·∫•p"] = " ".join(supplier_info["T√™n nh√† cung c·∫•p"])
    supplier_info["ƒê·ªãa ch·ªâ nh√† cung c·∫•p"] = " ".join(supplier_info["ƒê·ªãa ch·ªâ nh√† cung c·∫•p"])
    customer_info["Ng∆∞·ªùi giao"] = " ".join(customer_info["Ng∆∞·ªùi giao"])
    customer_info["ƒê·ªãa ch·ªâ kho"] = " ".join(customer_info["ƒê·ªãa ch·ªâ kho"])
    customer_info["Kho"] = " ".join(customer_info["Kho"])
    invoice_info["S·ªë h√≥a ƒë∆°n"] = " ".join(invoice_info["S·ªë h√≥a ƒë∆°n"])
    invoice_info["Ng√†y nh·∫≠p kho"] = " ".join(invoice_info["Ng√†y nh·∫≠p kho"])

    max_length = max(len(product_info[key]) for key in product_info)
    print ('max_length', max_length)
    for key in product_info:
        product_info[key] += [""] * (max_length - len(product_info[key]))

    return supplier_info, customer_info, invoice_info, product_info

# Function for the main OCR Invoice Detection and Dashboard
def main():
    st.session_state.supplier_info = {}
    st.session_state.customer_info = {}
    st.session_state.invoice_info = {}
    st.session_state.product_info = {}
    # OCR Invoice Detection and Dashboard 
    with st.sidebar:
        selected = option_menu("Trang ch·ªß", ["Tr√≠ch xu·∫•t", 'Th·ªëng k√™'],
                               icons=['body-text', 'bar-chart-line'], menu_icon="house", default_index=1)

    if selected == "Tr√≠ch xu·∫•t":
        st.title("üìëTr√≠ch xu·∫•t")
        uploaded_image = st.file_uploader("Upload an image", type=("jpg", "jpeg", "png", 'bmp', 'webp'), key="image")

        # Set up confidence
        confidence = float(st.slider("Select Model Confidence", 25, 100, 40)) / 100

        model = load_yolo_model()

        # Creating two columns on the main page
        col1, col2 = st.columns(2)

        with col1:
            if uploaded_image:
                img = Image.open(uploaded_image)
                st.image(img, caption="Uploaded Image.", use_column_width=True)

                # L·∫•y box -> model
                if model and st.button("Nh·∫≠n di·ªán h√≥a ƒë∆°n"):
                    results = model.predict(img, conf=confidence)
                    names = results[0].names
                    boxes = results[0].boxes
                    classes = results[0].boxes.cls
                    print("Detected Classes:", classes)
                    print("Class Names:", names)
                    # Update the value of res_plotted 
                    res_plotted = results[0].plot()[:, :, ::-1]

                    cropped_images = []
                    for bbox, cls in zip(boxes, classes):
                        bounding_box = tensor_to_numpy(bbox.xyxy)
                        x1, y1, x2, y2 = bounding_box[0]
                        # Crop the image to the bounding box, note that numpy uses y first
                        cropped_img = results[0].orig_img[int(y1):int(y2), int(x1):int(x2)]
                        cropped_images.append((cropped_img, cls))

                    ocr_results = []
                    for i in range(len(cropped_images)):
                        result = reader.readtext(cropped_images[i][0], add_margin=0.15)
                        for bound in result:
                            bbox = bound[0]
                            # Crop the image to the bounding box
                            x_min, y_min = [int(min(pt[0] for pt in bbox)), int(min(pt[1] for pt in bbox))]
                            x_max, y_max = [int(max(pt[0] for pt in bbox)), int(max(pt[1] for pt in bbox))]
                            cropped_image = Image.fromarray(cropped_images[i][0][y_min:y_max, x_min:x_max])
                            s = detector.predict(cropped_image)
                            ocr_results.append({names[int(cropped_images[i][1])]: s})

                    supplier_info, customer_info, invoice_info, product_info = extract_info_based_on_class(names, ocr_results)
                    st.session_state.supplier_info = supplier_info
                    st.session_state.customer_info = customer_info
                    st.session_state.invoice_info = invoice_info
                    st.session_state.product_info = product_info

                    print (product_info)

        # Creating two columns on the main page 
        with col2:
            if uploaded_image and 'res_plotted' in locals():
                st.image(res_plotted, caption='Detected Image', use_column_width=True)
                try:
                    with st.expander("K·∫øt qu·∫£ nh·∫≠n di·ªán"):
                        st.write(ocr_results)
                except Exception as ex:
                    st.write("No image is uploaded yet!")

        # Display information in Streamlit sections
        st.header("Th√¥ng tin nh√† cung c·∫•p")
        st.session_state.supplier_info["T√™n nh√† cung c·∫•p"] = st.text_input("T√™n nh√† cung c·∫•p", st.session_state.supplier_info.get("T√™n nh√† cung c·∫•p", ""))
        st.session_state.supplier_info["ƒê·ªãa ch·ªâ nh√† cung c·∫•p"] = st.text_input("ƒê·ªãa ch·ªâ nh√† cung c·∫•p", st.session_state.supplier_info.get("ƒê·ªãa ch·ªâ nh√† cung c·∫•p", ""))

        st.header("Th√¥ng tin kh√°ch h√†ng")
        st.session_state.customer_info["Ng∆∞·ªùi giao"] = st.text_input("Ng∆∞·ªùi giao", st.session_state.customer_info.get("Ng∆∞·ªùi giao", ""))
        st.session_state.customer_info["ƒê·ªãa ch·ªâ kho"] = st.text_input("ƒê·ªãa ch·ªâ kho", st.session_state.customer_info.get("ƒê·ªãa ch·ªâ kho", ""))
        st.session_state.customer_info["Kho"] = st.text_input("Kho", st.session_state.customer_info.get("Kho", ""))

        st.header("Th√¥ng tin h√≥a ƒë∆°n")
        st.session_state.invoice_info["S·ªë h√≥a ƒë∆°n"] = st.text_input("S·ªë h√≥a ƒë∆°n", st.session_state.invoice_info.get("S·ªë h√≥a ƒë∆°n", ""))
        st.session_state.invoice_info["Ng√†y nh·∫≠p kho"] = st.text_input("Ng√†y nh·∫≠p kho", st.session_state.invoice_info.get("Ng√†y nh·∫≠p kho", ""))

        st.header("B·∫£ng v·ªÅ s·∫£n ph·∫©m")

        # T√≠nh to√°n gi√° tr·ªã m·ªõi cho Th·ª±c nh·∫≠p v√† Th√†nh ti·ªÅn
        for i in range(len(st.session_state.product_info.get("Th·ª±c nh·∫≠p", []))):
            if not st.session_state.product_info.get("Th·ª±c nh·∫≠p", [])[i]:
                # N·∫øu Th√†nh ti·ªÅn kh√¥ng r·ªóng v√† ƒê∆°n gi√° kh√¥ng b·∫±ng 0, t√≠nh Th·ª±c nh·∫≠p
                if st.session_state.product_info.get("Th√†nh ti·ªÅn", [])[i] and float(st.session_state.product_info.get("ƒê∆°n gi√°", [])[i].replace(',', '').replace('.', '')) != 0:
                    try:
                        calculated_thuc_nhap = float(st.session_state.product_info.get("Th√†nh ti·ªÅn", [])[i].replace(',', '').replace('.', '')) / float(st.session_state.product_info.get("ƒê∆°n gi√°", [])[i].replace(',', '').replace('.', ''))
                        st.session_state.product_info.get("Th·ª±c nh·∫≠p", [])[i] = int(calculated_thuc_nhap) if calculated_thuc_nhap.is_integer() else calculated_thuc_nhap
                    except ValueError:
                        st.session_state.product_info.get("Th·ª±c nh·∫≠p", [])[i] = ""

            if not st.session_state.product_info.get("Th√†nh ti·ªÅn", [])[i]:
                if st.session_state.product_info.get("Th·ª±c nh·∫≠p", [])[i] and float(st.session_state.product_info.get("ƒê∆°n gi√°", [])[i].replace(',', '').replace('.', '')) != 0:
                    try:
                        calculated_thanh_tien = float(st.session_state.product_info.get("Th·ª±c nh·∫≠p", [])[i].replace(',', '').replace('.', '')) * float(st.session_state.product_info.get("ƒê∆°n gi√°", [])[i].replace(',', '').replace('.', ''))
                        st.session_state.product_info.get("Th√†nh ti·ªÅn", [])[i] = int(calculated_thanh_tien) if calculated_thanh_tien.is_integer() else calculated_thanh_tien
                    except ValueError:
                        st.session_state.product_info.get("Th√†nh ti·ªÅn", [])[i] = ""

        df_supplier = pd.DataFrame(st.session_state.supplier_info.items())
        df_customer = pd.DataFrame(st.session_state.customer_info.items())
        df_invoice = pd.DataFrame(st.session_state.invoice_info.items())
        df_products = pd.DataFrame(st.session_state.product_info)
        st.write(df_products)
        
        # Display total money 
        total_money = sum([float(amount.replace(',', '').replace('.', '')) for amount in st.session_state.product_info.get("Th√†nh ti·ªÅn", []) if amount])
        st.write(f"T·ªïng th√†nh ti·ªÅn: {total_money}")

        if st.button("L∆∞u th√¥ng tin"):
            df_supplier.to_csv("extracted_information.csv", mode = "a", header=False)
            df_customer.to_csv("extracted_information.csv", mode = "a", header=False)
            df_invoice.to_csv("extracted_information.csv", mode = "a", header=False)
            df_products.to_csv("extracted_information.csv", mode = "a", header=False)
            st.success("L∆∞u th√†nh c√¥ng")

    elif selected == 'Th·ªëng k√™':
        st.title("üìä Th·ªëng k√™")

        # Ph√°t hi·ªán m√£ h√≥a t·ªáp
        with open("2023-11-22T07-16_export.csv", 'rb') as f:
            result = chardet.detect(f.read())

        encoding = result['encoding']

        # ƒê·ªçc CSV v·ªõi m√£ h√≥a ƒë√£ ph√°t hi·ªán
        df = pd.read_csv("2023-11-22T07-16_export.csv", encoding=encoding)

        # Hi·ªÉn th·ªã d·ªØ li·ªáu ƒë√£ t·∫£i
        st.write("D·ªØ li·ªáu M·∫´u:")
        st.write(df)

        # Dropdown ƒë·ªÉ ch·ªçn lo·∫°i th·ªëng k√™
        st.sidebar.subheader("Th·ªëng k√™ kho h√†ng")
        selected_stat = st.sidebar.selectbox(
            "Ch·ªçn lo·∫°i th·ªëng k√™",
            ["H√†ng nh·∫≠p theo s·∫£n ph·∫©m", "H√†ng nh·∫≠p kho theo th·ªùi gian"],
        )

        if selected_stat == "H√†ng nh·∫≠p theo s·∫£n ph·∫©m":
            # T√πy ch·ªçn th√™m ƒë·ªÉ ch·ªçn kho·∫£ng th·ªùi gian
            product_options = df['Product_name'].unique().tolist()
            product_options.insert(0, "T·∫•t c·∫£ s·∫£n ph·∫©m")  # Th√™m t√πy ch·ªçn "T·∫•t c·∫£ s·∫£n ph·∫©m" v√†o ƒë·∫ßu danh s√°ch
            selected_products = st.sidebar.multiselect("Ch·ªçn S·∫£n ph·∫©m", product_options)

            # L·ªçc DataFrame d·ª±a tr√™n c√°c s·∫£n ph·∫©m ƒë√£ ch·ªçn
            if "T·∫•t c·∫£ s·∫£n ph·∫©m" in selected_products:
                df_filtered = df  # Hi·ªÉn th·ªã d·ªØ li·ªáu cho t·∫•t c·∫£ s·∫£n ph·∫©m
            else:
                df_filtered = df[df['Product_name'].isin(selected_products)]

            chart_type_options = ["S·∫£n ph·∫©m vs S·ªë l∆∞·ª£ng", "Gi√° vs S·∫£n ph·∫©m", "Gi√°, S·ªë l∆∞·ª£ng vs S·∫£n ph·∫©m",
                                "Bi·ªÉu ƒë·ªì tr√≤n S·∫£n ph·∫©m"]
            selected_chart_type = st.sidebar.radio("Ch·ªçn Lo·∫°i Bi·ªÉu ƒê·ªì", chart_type_options)

            # Kh·ªüi t·∫°o bi·ªÉu ƒë·ªì
            fig_chart = None

            if selected_chart_type == "Bi·ªÉu ƒë·ªì th·ªëng k√™ S·∫£n ph·∫©m v√† S·ªë l∆∞·ª£ng":
                df_amount = df_filtered.groupby('Product_name')['Amount'].sum().reset_index()
                fig_chart = px.bar(df_amount, x='Product_name', y='Amount', title='S·∫£n ph·∫©m vs S·ªë l∆∞·ª£ng',
                                color_discrete_sequence=px.colors.qualitative.Pastel)
                # Hi·ªÉn th·ªã gi√° tr·ªã con s·ªë l√™n ƒë·ªânh c·ªßa m·ªói c·ªôt
                fig_chart.update_traces(text=df_amount['Amount'], textposition='outside')
            elif selected_chart_type == "Bi·ªÉu ƒë·ªì th·ªëng k√™ Gi√° v√† S·∫£n ph·∫©m":
                df_price = df_filtered.groupby('Product_name')['Price'].sum().reset_index()
                fig_chart = px.bar(df_price, x='Product_name', y='Price', title='Gi√° vs S·∫£n ph·∫©m',
                                color_discrete_sequence=px.colors.qualitative.Pastel)
                # Hi·ªÉn th·ªã gi√° tr·ªã con s·ªë l√™n ƒë·ªânh c·ªßa m·ªói c·ªôt
                fig_chart.update_traces(text=df_price['Price'], textposition='outside')
            elif selected_chart_type == "Bi·ªÉu ƒë·ªì th·ªëng k√™ Gi√°, S·ªë l∆∞·ª£ng v√† S·∫£n ph·∫©m":
                df_summary = df_filtered.groupby('Product_name').agg({'Amount': 'sum', 'Price': 'sum'}).reset_index()
                df_new = pd.melt(df_summary, id_vars=["Product_name"], value_vars=["Amount", "Price"],
                                var_name='Metric', value_name='Value')
                fig_chart = px.bar(df_new, x="Product_name", y="Value", title="Gi√°, S·ªë l∆∞·ª£ng vs S·∫£n ph·∫©m",
                                color="Metric", barmode='group',
                                color_discrete_sequence=px.colors.qualitative.Pastel)
                # Hi·ªÉn th·ªã gi√° tr·ªã con s·ªë l√™n ƒë·ªânh c·ªßa m·ªói c·ªôt
                fig_chart.update_traces(text=df_new['Value'], textposition='outside')

            elif selected_chart_type == "Bi·ªÉu ƒë·ªì tr√≤n S·∫£n ph·∫©m":
                df_product_amount = df_filtered.groupby('Product_name')['Amount'].sum().reset_index()
                fig_chart = px.pie(df_product_amount, values='Amount', names='Product_name',
                                title='S·∫£n ph·∫©m vs S·ªë l∆∞·ª£ng (Bi·ªÉu ƒë·ªì tr√≤n)',
                                color_discrete_sequence=px.colors.qualitative.Pastel)

            # Ki·ªÉm tra xem bi·ªÉu ƒë·ªì c√≥ gi√° tr·ªã kh√¥ng tr∆∞·ªõc khi v·∫Ω
            if fig_chart is not None:
                st.plotly_chart(fig_chart)

        elif selected_stat == "H√†ng nh·∫≠p kho theo th·ªùi gian":
            df_filtered = pd.DataFrame()

            # T√πy ch·ªçn th√™m ƒë·ªÉ ch·ªçn kho·∫£ng th·ªùi gian
            time_interval_options = ["Th√°ng", "Qu√Ω", "NƒÉm"]  # Lo·∫°i b·ªè "Ng√†y" kh·ªèi danh s√°ch
            selected_time_interval = st.sidebar.selectbox("Ch·ªçn Kho·∫£ng Th·ªùi Gian", time_interval_options)

            # Ki·ªÉm tra xem c·ªôt ƒë·∫°i di·ªán cho ng√†y c√≥ trong DataFrame kh√¥ng
            if 'Date' not in df.columns:
                st.error("Th·ªùi gian kh√¥ng c√≥ trong DataFrame.")
            else:
                df['Date'] = pd.to_datetime(df['Date'], format='%d/%m/%Y')

                # L·ªçc d·ªØ li·ªáu d·ª±a tr√™n kho·∫£ng th·ªùi gian ƒë√£ ch·ªçn
                if selected_time_interval == "Th√°ng":
                    selected_month = st.sidebar.select_slider("Ch·ªçn Th√°ng", options=range(1, 13), value=1)
                    selected_year = st.sidebar.selectbox("Ch·ªçn NƒÉm", options=df['Date'].dt.year.unique(), index=0)
                    df_filtered = df[(df['Date'].dt.month == selected_month) & (df['Date'].dt.year == selected_year)]
                    title = f"H√†ng nh·∫≠p trong Th√°ng {selected_month} nƒÉm {selected_year}"

                elif selected_time_interval == "Qu√Ω":
                    selected_quarter = st.sidebar.select_slider("Ch·ªçn Qu√Ω", options=range(1, 5), value=1)
                    selected_year = st.sidebar.selectbox("Ch·ªçn NƒÉm", options=df['Date'].dt.year.unique(), index=0)
                    df_filtered = df[(df['Date'].dt.quarter == selected_quarter) & (df['Date'].dt.year == selected_year)]
                    title = f"H√†ng nh·∫≠p trong Qu√Ω {selected_quarter} nƒÉm {selected_year}"

                elif selected_time_interval == "NƒÉm":
                    selected_year = st.sidebar.selectbox("Ch·ªçn NƒÉm", options=df['Date'].dt.year.unique(), index=0)
                    df_filtered = df[df['Date'].dt.year == selected_year]
                    title = f"H√†ng nh·∫≠p trong NƒÉm {selected_year}"
                else:
                    title = f"H√†ng nh·∫≠p theo th·ªùi gian"

                # Ph·∫ßn m√£ cho vi·ªác ch·ªçn lo·∫°i bi·ªÉu ƒë·ªì (Bi·ªÉu ƒë·ªì C·ªôt, Bi·ªÉu ƒë·ªì Tr√≤n, Bi·ªÉu ƒë·ªì ƒê∆∞·ªùng) s·∫Ω ƒë∆∞·ª£c th√™m ·ªü ƒë√¢y...

                # T√πy ch·ªçn th√™m ƒë·ªÉ ch·ªçn s·∫£n ph·∫©m
                product_options = ["T·∫•t c·∫£ s·∫£n ph·∫©m"] + df['Product_name'].unique().tolist()
                selected_products = st.sidebar.multiselect("Ch·ªçn S·∫£n ph·∫©m", product_options)

                # L·ªçc DataFrame d·ª±a tr√™n c√°c s·∫£n ph·∫©m ƒë√£ ch·ªçn
                if "T·∫•t c·∫£ s·∫£n ph·∫©m" not in selected_products:
                    if selected_products:
                        df_filtered = df_filtered[df_filtered['Product_name'].isin(selected_products)]
                    else:
                        st.warning("Ch·ªçn √≠t nh·∫•t m·ªôt s·∫£n ph·∫©m.")

                # Hi·ªÉn th·ªã d·ªØ li·ªáu ƒë√£ l·ªçc
                st.write(f"{title}")
                st.write(df_filtered)

                # Bi·ªÉu ƒë·ªì d·ª±a tr√™n lo·∫°i bi·ªÉu ƒë·ªì ƒë√£ ch·ªçn
                st.subheader(f"Bi·ªÉu ƒë·ªì th·ªëng k√™ cho {title}")
                selected_chart_type = st.sidebar.selectbox("Ch·ªçn Lo·∫°i Bi·ªÉu ƒê·ªì",
                                                        ["Bi·ªÉu ƒê·ªì C·ªôt - S·∫£n ph·∫©m vs S·ªë l∆∞·ª£ng",
                                                            "Bi·ªÉu ƒê·ªì C·ªôt - Gi√° vs S·∫£n ph·∫©m",
                                                            "Bi·ªÉu ƒê·ªì C·ªôt - Gi√°, S·ªë l∆∞·ª£ng vs S·∫£n ph·∫©m",
                                                            "Bi·ªÉu ƒê·ªì K·∫øt H·ª£p - Gi√°, S·ªë l∆∞·ª£ng vs S·∫£n ph·∫©m"])

                if selected_chart_type == "Bi·ªÉu ƒê·ªì C·ªôt - S·∫£n ph·∫©m vs S·ªë l∆∞·ª£ng":
                    fig_chart = px.bar(df_filtered, x="Product_name", y="Amount", title="Bi·ªÉu ƒê·ªì C·ªôt - S·∫£n ph·∫©m vs S·ªë l∆∞·ª£ng",
                                    color_discrete_sequence=px.colors.qualitative.Pastel)
                    st.plotly_chart(fig_chart)

                elif selected_chart_type == "Bi·ªÉu ƒê·ªì C·ªôt - Gi√° vs S·∫£n ph·∫©m":
                    fig_chart = px.bar(df_filtered, x="Product_name", y="Price", title="Bi·ªÉu ƒê·ªì C·ªôt - Gi√° vs S·∫£n ph·∫©m",
                                    color_discrete_sequence=px.colors.qualitative.Pastel)
                    st.plotly_chart(fig_chart)

                elif selected_chart_type == "Bi·ªÉu ƒê·ªì C·ªôt - Gi√°, S·ªë l∆∞·ª£ng vs S·∫£n ph·∫©m":
                    fig_chart = px.bar(df_filtered, x="Product_name", y=["Amount", "Price"],
                                    title="Bi·ªÉu ƒê·ªì C·ªôt - Gi√°, S·ªë l∆∞·ª£ng vs S·∫£n ph·∫©m", barmode='group',
                                    color_discrete_sequence=px.colors.qualitative.Pastel)
                    st.plotly_chart(fig_chart)

                elif selected_chart_type == "Bi·ªÉu ƒê·ªì K·∫øt H·ª£p - Gi√°, S·ªë l∆∞·ª£ng vs S·∫£n ph·∫©m":
                    fig_chart = px.bar(df_filtered, x="Product_name", y=["Amount", "Price"],
                                    title="Bi·ªÉu ƒê·ªì K·∫øt H·ª£p - Gi√°, S·ªë l∆∞·ª£ng vs S·∫£n ph·∫©m", barmode='group',
                                    color_discrete_sequence=px.colors.qualitative.Pastel)
                    st.plotly_chart(fig_chart)



# Ch·∫°y ·ª©ng d·ª•ng
if not st.session_state.logged_in:
    login()
else:
    main()
